import numpy as np

# Importing standard Qiskit libraries
from qiskit import QuantumCircuit, transpile, Aer, IBMQ, execute
from qiskit.tools.jupyter import *
from qiskit.visualization import *
from ibm_quantum_widgets import *
from qiskit.providers.aer import QasmSimulator
from qiskit.providers.ibmq import least_busy  #Para verificar qual é o QComputer mais disponível

# Loading your IBM Quantum account(s)
provider = IBMQ.load_account()
def dj_oracle(case, n):
    oracle_qc = QuantumCircuit(n+1)
    if case == "balanced":
        for qubit in range(n):
            oracle_qc.cx(qubit, n)      
    if case == "constant":
        output = np.random.randint(2)
        if output == 1:
            oracle_qc.x(n)
            
    oracle_gate = oracle_qc.to_gate()
    oracle_gate.name = "Oraculo"
    return oracle_gate
def dj_algorithm(n, case='random'):
    dj_circuit = QuantumCircuit(n+1, n)
    for qbit in range(n):
        dj_circuit.h(qbit)
    dj_circuit.x(n)
    dj_circuit.h(n)
    if case == "random":
        random = np.random.randint(2)
        if random == 0:
            case = 'constant'
        else:
            case = 'balanced'
    oracle = dj_oracle(case, n)
    dj_circuit.append(oracle, range(n+1))
    for i in range(n):
        dj_circuit.h(i)
        dj_circuit.measure(i, i)
    return dj_circuit
n = 4
dj_circuit = dj_algorithm(n,"constant")
dj_circuit.draw()